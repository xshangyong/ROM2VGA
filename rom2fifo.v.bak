module read_rom
(
	clk_100M_i,
	nrst_i,
	rom_dat_i,
	rdrom_add_o,
);

	input 			clk_100M_i;
	input[2:0]		rom_dat_i;
	output[15:0]	rdrom_add_o;

	reg[9:0]	fifo_used;
	reg[3:0]	fifo_dat;
	reg			clear_fifo;
	reg			rd_fifo;
	reg			wr_fifo_en;
	reg[7:0]	rom_radd_cnt = 0;
	reg[7:0]	rom_cadd_cnt = 0;
	reg[15:0]	rd_rom_add = 0;
	reg[3:0]	wr_fifo_st = 0;
	
	parameter 		Clear 	= 2'b00;
	parameter 		Idle 	= 2'b01;
	parameter 		Wr_fifo	= 2'b10; 
	parameter 		None2 	= 2'b11;
	
	assign rdrom_add_o = rd_rom_add;
	desk_fifo inst_dfifo
	(	         
		.data	(rom_dat_i),
		.clock	(clk_100M_i),
		.rdreq	(rd_fifo),
		.wrreq	(wr_fifo_1d),
		.q		(fifo_dat),
		.sclr	(clear_fifo),
		.usedw	(fifo_used)
	);
	
//  	wr_fifo state machine 
//	 	fifo_use < 512 ,start write , 1 write state machine write 255 data
	always@(posedge clk_100M_i) begin   
		if(!nrst_i) begin
			wr_fifo_st <= Clear;
		end
		
		else begin
			case (wr_fifo_st)
				Clear : begin
					wr_fifo_st  <= Idle;
				end
				
				Idle : begin
					if(rd_rom_add = 16'hffff) begin
						wr_fifo_st 	<= Idle;
					end
					else if(fifo_used_r <= 512) begin
						wr_fifo_st  <= Wr_fifo;
					end
					else begin
						wr_fifo_st 	<= Idle;
					end
				end
				
				Wr_fifo : begin
					else if(rom_cadd_cnt == 255) begin
						wr_fifo_st <= Idle;
					end
					
					else begin
						wr_fifo_st <= Wr_fifo;
					end
				end
			
			endcase
		end
		
	end
	
//  write data to fifo	
	always@(posedge clk_100M) begin  
		if(!RSTn) begin
			rom_cadd_cnt 	<= 0;
			rom_radd_cnt 	<= 0;
			wr_fifo_en   <= 0;
			rd_rom_add   <= 0;
		end
		
		else begin
			case (wr_fifo_st)
				Clear: begin
					rom_cadd_cnt 	<= 0;
					rom_radd_cnt 	<= 0;
					rd_rom_cadd <= 0;
					wr_fifo_en <= 0;
				end
				
				Idle : begin
					rom_cadd_cnt <= 0;
					rd_rom_cadd <= 0;
					wr_fifo_en <= 0;
				end
				
				Wr_fifo : begin
					if(rom_cadd_cnt == 255) begin
						if(rom_radd_cnt == 255) begin  
							rom_radd_cnt 	<= 0;
						end
						
						else begin
							rom_radd_cnt 	<= rom_radd_cnt + 1;
						end
						rom_cadd_cnt <= 0;
						wr_fifo_en 	<= 1;
						rd_rom_add <= {rom_radd_cnt,rom_cadd_cnt};
					end
					
					else begin
						rom_cadd_cnt <= rom_cadd_cnt + 1;
						wr_fifo_en 	<= 1;
						rd_rom_add <= {rom_radd_cnt,rom_cadd_cnt};
					end	
				end
			endcase
		end
		
	end
	always@(posedge clk_100M) begin  
		if(!RSTn) begin
			wr_fifo_1d <= 0;
		end
		else begin
			wr_fifo_1d <= wr_fifo_en;
		end
		
	end

endmodule
