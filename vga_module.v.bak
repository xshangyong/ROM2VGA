module vga_module
(
	CLK, 
	RSTn,
	VSYNC_Sig, 
	HSYNC_Sig,
	Red_Sig, 
	Green_Sig, 
	Blue_Sig,
	ps2_clk_i,
	ps2_data_i,
	row_o,
	column_o,
	led_o1,
	led_o2,
	led_o3,
	sdram_data,
	sdram_addr,
	sdram_clk,
	sdram_ba,
	sdram_ncas,
	sdram_clke,
	sdram_nwe,
	sdram_ncs,
	sdram_dqm,
	sdram_nras
);

	input 	CLK;
	input 	RSTn;
	// ps2 
	input 	ps2_clk_i;
	input 	ps2_data_i;
	// led
	output 	led_o1;
	output 	led_o2;
	output 	led_o3;
	// vga
	output reg 	VSYNC_Sig;
	output reg 	HSYNC_Sig;
	output 		Red_Sig;
	output 		Green_Sig;
	output 		Blue_Sig;
	// digitron
	output[7:0]		row_o;
	output[5:0]		column_o;
	// sdram
	inout[15:0] 	sdram_data;
	output[12:0]	sdram_addr;
	output	 		sdram_clk;
	output[1:0]		sdram_ba;
	output	 		sdram_ncas;
	output	 		sdram_clke;
	output	 		sdram_nwe;
	output	 		sdram_ncs;
	output[1:0]		sdram_dqm;
	output			sdram_nras;


	/*************************************/

	wire 			VSYNC_Sig_d1;
	wire 			HSYNC_Sig_d1;
	wire 			clk_100M;
	wire [10:0]		Column_Addr_Sig;
	wire [10:0]		Row_Addr_Sig;
	wire 			Ready_Sig;
	wire [15:0]		rom_addr;
	wire [2:0]		rom_dat;
	wire  [2:0]     rom_dat_use;
	reg[15:0]		rd_rom_add;
	reg				start_wr_fifo;
	reg				wr_fifo_en = 0;
	reg				wr_fifo_en1p;
	reg				VSYNC_Sig_1d;
	//	 reg[12:0]		rom_cadd_cnt;
	reg[3:0]		wr_fifo_st;
	wire [2:0]		fifo_dat;
	
	wire			ps2_done_r;
	wire[1:0]		ps2_break_r;
	wire[15:0]		ps2_data_r;
	wire			is_pic;
	wire[9:0]		fifo_used_r;
	reg[19:0] 		dat_2dig;
	reg				led_r1 = 0;
	reg				led_r2 = 0;
	reg				led_r3 = 0;
	reg[7:0]		rom_radd_cnt = 0;
	reg[7:0]		rom_cadd_cnt = 0;
	reg[7:0]		rd_rom_radd = 0;
	reg[7:0]		rd_rom_cadd = 0;
	parameter 		Clear 	= 2'b00;
	parameter 		Idle 	= 2'b01;
	parameter 		Wr_fifo 	= 2'b10; 
	parameter 		None2 	= 2'b11;

	assign led_o1 = led_r1;
	assign led_o2 = led_r2;
	assign led_o3 = led_r3;

	reg		start_wrfifoA = 0;


	clk_100m inst_100m(
	     .inclk0( CLK ),    // input - from top
		  .c0( clk_100M )   // to vga
	);

	pll_133 inst_133m(
	     .inclk0( clk_100M ),    // pll100
		  .c0( clk_133M )   	// 	to sdram
	);	 	
	 /**************************************/
	 
	// sdram_top inst_sdtop
	// (
		// .clk		(clk_133M	),  // use 133MHz clk
		// .rst_n		(RSTn		),
		// .sdram_data	(sdram_data	),
		// .sdram_addr	(sdram_addr	),
		// .sdram_clk	(sdram_clk	),
		// .sdram_ba	(sdram_ba	),
		// .sdram_ncas	(sdram_ncas	),
		// .sdram_clke	(sdram_clke	),
		// .sdram_nwe	(sdram_nwe	),
		// .sdram_ncs	(sdram_ncs	),
		// .sdram_dqm	(sdram_dqm	),
		// .sdram_nras (sdram_nras )
	// );

	// fifo_2_sdram	inst_fifo2sdram
	// (
		
	// )
	
	read_rom	inst_rdrom
	(
		.clk_100M_i		(clk_100M),
		.rd_rom_add_i	(rd_rom_add),
		.rom_dat_use_o	(rom_dat_use)	
	)
	
	rom2fifo	inst_rom2fifo
	(
		.clk_100M_i		(clk_100M),
		.nrst_i			(RSTn),
		.rom_dat_i		(rom_dat_use),
		.rdrom_add_o	(rd_rom_add)	
	)

	
	
	
	
	 digitron inst_digi
	(
		.clk_i(CLK),
		.rst_i(RSTn),
		.num_i(dat_2dig),
		.row_o(row_o),
		.column_o(column_o)
	);
	

	 
	 ps2 inst_ps2
	(
		.clk_i(CLK),
		.rst_i(RSTn),
		.ps2_clk_i(ps2_clk_i),
		.ps2_data_i(ps2_data_i),
		.ps2_data_o(ps2_data_r),
		.ps2_break_o(ps2_break_r),
		.ps2_done_o(ps2_done_r)
	);
	 
	
	 
	 always@(posedge CLK)begin
		if(ps2_done_r == 1) begin
			 dat_2dig <= ps2_data_r[15:8] * 1000 + ps2_data_r[7:0];
	   end
	 end
	 
	 always@(posedge CLK)begin
		if(ps2_done_r == 1) begin
			if(ps2_break_r == 2'b01) begin
				 led_r1 <= 1;
				 led_r2 <= 0;
				 led_r3 <= 0;
			end
			else if(ps2_break_r == 2'b10) begin
				 led_r1 <= 0;
				 led_r2 <= 1;
				 led_r3 <= 0;
		   end
		end
	 end
	 
	 always@(posedge CLK)begin
		  VSYNC_Sig<= VSYNC_Sig_d1;
		  HSYNC_Sig<= HSYNC_Sig_d1;
	 end
	 
	 sync_module inst_sync
	 (
	     .CLK( clk_100M ),
		  .RSTn( RSTn ),
		  .VSYNC_Sig( VSYNC_Sig_d1 ),   // output - to top
		  .HSYNC_Sig( HSYNC_Sig_d1 ),   // output - to top
		  .Column_Addr_Sig( Column_Addr_Sig ), // output - to inst_vga_control
		  .Row_Addr_Sig( Row_Addr_Sig ),       // output - to inst_vga_control
		  .Ready_Sig( Ready_Sig )              // output - to inst_vga_control
	 );
	 
	 /******************************************/
	 
	 vga_control_module inst_vga_control
	 (
	      .CLK( clk_100M ),
		  .RSTn( RSTn ),
		  .Ready_Sig( Ready_Sig ),             // input - from inst_sync
		  .Column_Addr_Sig( Column_Addr_Sig ), // input - from inst_sync
		  .Row_Addr_Sig( Row_Addr_Sig ),       // input - from inst_sync
		  .Red_Sig( Red_Sig ),      // output - to top
		  .Green_Sig( Green_Sig ),  // output - to top
		  .Blue_Sig( Blue_Sig ),    // output - to top
		  .ps2_data_i( ps2_data_r[7:0] ),
		  .rom_addr_o(rom_addr),
		  .fifo_data(fifo_dat),
		  .is_pic(is_pic)
	 );


endmodule
